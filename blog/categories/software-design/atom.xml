<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software Design | Venkatesh CM]]></title>
  <link href="http://venkateshcm.github.io/blog/categories/software-design/atom.xml" rel="self"/>
  <link href="http://venkateshcm.github.io/"/>
  <updated>2014-05-05T20:06:39+05:30</updated>
  <id>http://venkateshcm.github.io/</id>
  <author>
    <name><![CDATA[Venkatesh CM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Zen Of Software Design - Part 2]]></title>
    <link href="http://venkateshcm.github.io/2014/04/Zen-Of-Software-Design-Part-2/"/>
    <updated>2014-04-28T00:00:00+05:30</updated>
    <id>http://venkateshcm.github.io/2014/04/Zen-Of-Software-Design-Part-2</id>
    <content type="html"><![CDATA[<p>This blog is part 2 of <a href="/2014/04/Zen-Of-Software-Design-Part-1/">Zen of Software Design : Part 1</a> which covers lines 1 to 9 of <a href="http://legacy.python.org/dev/peps/pep-0020/">Zen of Python</a>, if you have not read it please read it before reading this post. In this blog I will cover lines 10 to 19 of <a href="http://legacy.python.org/dev/peps/pep-0020/">Zen of Python</a></p>

<p><b><i>Errors should never pass silently.</i></b><br/>
<b><i>Unless explicitly silenced.</i></b></p>

<p>Silencing an error is hiding a symptom. Catching an exception and ignoring it is hiding error from being discovered and providing false feedback to user. Application should make errors transparent and visible. i.e. End user should know that the current task has failed and he had to take appropriate action and not proceed with assumption that the task has succeeded.</p>

<p>That said, in few occasions when a low priority task is performed along with high priority task, it is better not to fail the entire request if low priority task fails.</p>

<p>For Example:&ndash; User registration might have two steps</p>

<ul>
<li>Update user information in datastore</li>
<li>Send out an confirmation email</li>
</ul>


<p>If user information is updated in datastore and sending confirmation email failed it is ok to ignore send email error by queuing it to be processed later. But this also means taking appropriate steps to intimate support person and to make sure developer has enough information to figure out the reason for failure.</p>

<p><b><i>In the face of ambiguity, refuse the temptation to guess.</i></b><br/>
<b><i>Although that way may not be obvious at first unless you&rsquo;re Dutch.</i></b></p>

<p>In large systems it is difficult to figure what went wrong, without testing and inspecting several scenarios. I have seen developers jump into code to fix an issue without understanding the root caused for error and later to realise they were barking on wrong tree. It is better to simulate the error and than find a solution to fix the error, instead of working on a solution directly. After simulating error we could test out different hypothesis to confirm the assumptions.</p>

<p><b><i>Now is better than never.</i></b><br/>
<b><i>Although never is often better than <em>right</em> now.</i></b></p>

<p>When faced with a need for large scale code refactoring, we tend to procrastinate and postpone the refactoring. Even thought we know the urgency or necessity for refactoring and how to fix the problem, we keep broken windows in codebase causing more issues.</p>

<p>There are cases where we don&rsquo;t have a solution for the problem or we don&rsquo;t have enough time to make the change right now. It is better to hold off changes, instead of doing half baked (partial) solution right now. In many cases it is better to hold off doing the changes until the right opportune moment, instead of jumping into action right away. (Eg :&ndash; Premature optimisation)</p>

<p><b><i>If the implementation is hard to explain, it&rsquo;s a bad idea.</i></b><br/>
<b><i>If the implementation is easy to explain, it may be a good idea.</i></b></p>

<p>If the business problem is not modelled correctly or there are several exceptions each core application flows. Software design tends to be hard to explain. In such cases, hard to explain, should be treated as a design-smell.</p>

<p>Difficulty to explain means bad design but easy to explain does not imply good design. Simple design might not have taken all different scenarios into consideration or could have made plain wrong assumption.</p>

<p>Design should be as-complex or as-simple as the requirement need, not more and not less. Over designing is adding unnecessary complexity to the system and under designing is not handling all scenarios.</p>

<p><b><i>Namespaces are one honking great idea &mdash; let&rsquo;s do more of those!</i></b></p>

<p>There are several tools and conventions which make life easier, we should just follow them instead of reinventing new solutions. Following conventions and standards is very important means of managing code quality.</p>

<pre><code>$ python

&gt;&gt;&gt; import this

The Zen of Python, by Tim Peters
1 Beautiful is better than ugly.
2 Explicit is better than implicit.
3 Simple is better than complex.
4 Complex is better than complicated.
5 Flat is better than nested.
6 Sparse is better than dense.
7 Readability counts.
8 Special cases aren't special enough to break the rules.
9 Although practicality beats purity.
10 Errors should never pass silently.
11 Unless explicitly silenced.
12 In the face of ambiguity, refuse the temptation to guess.
13 There should be one-- and preferably only one --obvious way to do it.
14 Although that way may not be obvious at first unless you're Dutch.
15 Now is better than never.
16 Although never is often better than *right* now.
17 If the implementation is hard to explain, it's a bad idea.
18 If the implementation is easy to explain, it may be a good idea.
19 Namespaces are one honking great idea -- let's do more of those! 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zen of Software Design - Part 1]]></title>
    <link href="http://venkateshcm.github.io/2014/04/Zen-Of-Software-Design-Part-1/"/>
    <updated>2014-04-11T00:00:00+05:30</updated>
    <id>http://venkateshcm.github.io/2014/04/Zen-Of-Software-Design-Part-1</id>
    <content type="html"><![CDATA[<p>I call it Zen of Software Design.. instead of <a href="http://legacy.python.org/dev/peps/pep-0020/">Zen of Python</a> since it applies to all of software design and not only to python. The poem itself is presented at the bottom of this blog for reference and below is my interpretations and thoughts on it.</p>

<p>Lines 1 to 9 of <a href="http://legacy.python.org/dev/peps/pep-0020/">Zen of Python</a> is covered in this blog, Lines 10 to 19 will be covered in <a href="/2014/04/Zen-Of-Software-Design-Part-2/">Zen of Software Design : Part 2</a>.</p>

<br/>


<p><b><i>Interpretation</i></b></p>

<p>The way to read &ldquo;better than&rdquo; statements in poem, is to understand that one does not always win over other and both have their place under sun. But the poem advocates one over another when all things are equal and there is a choice to be made. i.e. leaning or favouring one over another.</p>

<br/>


<p><b><i>Beautiful is better than ugly</i></b></p>

<p>While it is easy to understand that beautiful is better than ugly, it is very subjective to know beautiful from ugly. If you look at source code as an art, like a painting, bad code/design will stink (<a href="http://en.wikipedia.org/wiki/Code_smell">code-smell</a>) and make you  uncomfortable instinctively. I don&rsquo;t have standard rules by which you can differentiate beautiful from ugly design (in same sense as you can not set standard rules for beautiful paintings). I guess it comes from looking at different codebase and experience.</p>

<br/>


<p><b><i>Explicit is better than implicit.</i></b></p>

<p>It should be obvious to figure-out what&rsquo;s happening in code, even for someone not familiar with the codebase. Usually implicit design makes it look like black magic without any clue how it is working or where to look for related code. There are two kind of implicit we face in day-to-day work.</p>

<ul>
<li><p>Well known implicit :&ndash; Things which are well documented and have become standard way of doing things. These implicit usually go across project team boundaries. Example : SpringMVC annotations, Rails conventions</p></li>
<li><p>Project implicit :&ndash; Things which project teams builds within the project which is not something a new developer would be acquainted with in other projects.</p></li>
</ul>


<br>


<p>I have seen developers going overboard with Annotations or conventions in projects, where it is difficult to figure-out how things work. A rule of thumb I use to figure out if we have gone overboard is by asking myself the question &ldquo;Can I explain, to a new developer joining team, all the implicit things happening in the project within 1 hour session?&rdquo;.</p>

<br/>


<p><b><i>Simple is better than complex.</i></b></p>

<p>Again this seems very obvious but still elusive. No one wants to create a complex system but creating simple design/software is a complex job.</p>

<p>Few questions which help me be on track of simplicity</p>

<ul>
<li><p>How many execution flows/paths exists?</p>

<p>if there are few execution paths than its easy to keep them in mind and figure out a specific scenario falls in which one of the paths.</p></li>
<li><p>How easy is it to figure-out a given scenario falls under which execution path?</p>

<p>It should be easy to figure that out, if the application is well designed and simple to remember.</p></li>
<li><p>How many exceptions flows exist as against conventional flows?</p>

<p>In every application there are few exceptional scenarios which don&rsquo;t fall under normal execution paths and need exceptional flows for them. These should be minimal and explicitly identified.</p></li>
<li><p>How easy it is to explain high level design to a new developer?</p>

<p>I found this rule of thumb to be very helpful. It becomes obvious when you explain (or imagining to explain) how application works to a new developer. If you can explain it without flinching several times when the developer says &ldquo;ah in scenario x app will do this&rdquo; and you go hmmm its mostly correct but there are some other issues etc.</p></li>
</ul>


<br/>


<p><b><i>Complex is better than complicated.</i></b></p>

<p>Design can be complex because domain is complex but sometime domain is simple but software is designed or implemented in complicated way. Design should be as-complex or as-simple as the requirement need, not more and not less.</p>

<p>The questions I ask to figure out if design is complicated is</p>

<ul>
<li>What part of requirement is causing the design to be complex?</li>
<li>Is the technology choice introducing additional complexity?</li>
<li>Is there any negotiable requirement which can be removed to make it more simpler?</li>
<li>Are we designing the system for future proofing which might not be required?</li>
</ul>


<br/>


<p><b><i>Flat is better than nested.</i></b></p>

<p>When we look at code there are few obvious cases where this is true. For example it is better to have several flat functions than having one long nested function. For example :&ndash; Using Strategy Design Pattern or Command Design pattern to separate code into independent units. Where it is not very obvious and still useful to think is</p>

<ul>
<li>How many layers are we introducing in software architecture?</li>
<li>How many jumps do we need to make to get to the final value (may be cached value or database lookup) ?</li>
<li>Is the path of execution intermingled and can not be modified independently?</li>
</ul>


<br/>


<p><b><i>Sparse is better than dense.</i></b>
<b><i>Readability counts.</i></b></p>

<p>Few times I have questioned myself if single responsibility principle, unit testing, dependency injection and design patterns are good. The reason for this doubt is that after following single responsibility principle, unit testing with dependency injection and following design pattern, a small codebase grows to considerable code size.  I call this new increased codebase sparse compared with earlier code which was dense.</p>

<p>The advantages of sparse code base compared to dense code is</p>

<ul>
<li>It is easier to understand and modify.</li>
<li>It is easier to extend to add more scenarios.</li>
<li>It is easier to isolate an issue and fix it.</li>
</ul>


<br/>


<p><b><i>Special cases aren&rsquo;t special enough to break the rules.</i></b>
<b><i>Although practicality beats purity.</i></b></p>

<p>Good software Architecture/Design usually settle with a set of rules like</p>

<ul>
<li>Execution flows/paths</li>
<li>Logical Architecture Layers and how each layer communicated with another layer.</li>
<li>Inter-process communication protocols</li>
</ul>


<p>Every now-and-then a new requirement which breaks design rules under which application has operating comes in. Usual tendency is to treat this as special case which works differently to existing architecture.</p>

<p>While it might be the right approach in few cases, we should</p>

<ul>
<li>strive to see if this special case can be modelled as one of the existing flows</li>
<li>check if existing rules can be extended to incorporate the new requirement as first class design decision instead of treating it as special case which breaks the rules.</li>
<li>check if we have been adding a lot of special cases and do a course correction if required.</li>
</ul>


<p>On the other hand if they truly are special cases and trying to extend or modelling it has one of the existing flows make design complicated, we should not hesitate to incorporate the new requirement as special case as a pragmatic/practical architect or developer should do.</p>

<p>Lines 10 to 19 will be covered in <a href="/2014/04/Zen-Of-Software-Design-Part-2/">Zen of Software Design : Part 2</a> of this blog</p>

<pre><code>$ python

&gt;&gt;&gt; import this
The Zen of Python, by Tim Peters

1 Beautiful is better than ugly.
2 Explicit is better than implicit.
3 Simple is better than complex.
4 Complex is better than complicated.
5 Flat is better than nested.
6 Sparse is better than dense.
7 Readability counts.
8 Special cases aren't special enough to break the rules.
9 Although practicality beats purity.
10 Errors should never pass silently.
11 Unless explicitly silenced.
12 In the face of ambiguity, refuse the temptation to guess.
13 There should be one-- and preferably only one --obvious way to do it.
14 Although that way may not be obvious at first unless you're Dutch.
15 Now is better than never.
16 Although never is often better than *right* now.
17 If the implementation is hard to explain, it's a bad idea.
18 If the implementation is easy to explain, it may be a good idea.
19 Namespaces are one honking great idea -- let's do more of those! 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Silver Bullet Solution]]></title>
    <link href="http://venkateshcm.github.io/2014/04/silver-bullet-solution/"/>
    <updated>2014-04-08T00:00:00+05:30</updated>
    <id>http://venkateshcm.github.io/2014/04/silver-bullet-solution</id>
    <content type="html"><![CDATA[<p>While working on a solution for a problem, we try to find a solution which works in all conditions or situations. There are egos built-up on which solution is better or solves all the problems.
But rarely have I seen a solution which fixes the problem completely with-out any side effects.</p>

<p>What usually happens is we</p>

<ul>
<li><p>move the problem (or issue) from one area to other area.</p>

<p>Example :&ndash; In database normalisation we improve performance of add/update by normalising but causing read performance issues.</p></li>
<li><p>solve one problem at the cost of introducing another problem.</p>

<p>Example :&ndash; We introduce redundancy to gain retrieval performance at the cost of multiple updates (due to redundancy).</p></li>
</ul>


<p>This shows that problems are not really solved but just moved around or converted to a different problem.</p>

<p>But we still find and use solutions you might say. Yes, we do and we do it by trading off one type of problem to another type of problem.</p>

<p>So the Art of finding a solution to a problem is identifying problems you are willing to live-with and problems you can not compromise on.</p>

<p>In fact, I have found different solutions by just compromising on a dimension of existing solution and to find a new solution.</p>

<p>Reference</p>

<ol>
<li><p><a href="http://en.wikipedia.org/wiki/No_free_lunch_theorem">No Free Lunch theorems</a></p></li>
<li><p><a href="http://en.wikipedia.org/wiki/CAP_theorem">CAP theorem</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How, What and Why of Software Development]]></title>
    <link href="http://venkateshcm.github.io/2014/04/How-What-And-Why-of-Software-Development/"/>
    <updated>2014-04-07T00:00:00+05:30</updated>
    <id>http://venkateshcm.github.io/2014/04/How-What-And-Why-of-Software-Development</id>
    <content type="html"><![CDATA[<p>There are three levels at which a developer can operate during software development.</p>

<p><b><i>How</i></b></p>

<p>First Level or basic level is when someone is told what needs to be done. He/She does what is told. At this level the design is handed over to you and you are just implementing someone else&rsquo;s design without fully understanding implications of design.</p>

<p>Change Area :&ndash; Implementation. Software Design is fixed but implementation is altered by team.</p>

<p>Example :&ndash; Software company is provided with design documents with object class specifications and asked to implement the software.</p>

<p><b><i>What</i></b></p>

<p>Second Level or intermediate level is when someone is given a requirement and allowed to design and implement the software without major restrictions on how the requirement is designed or implemented. At this level developer is given freedom to choose different implementation options which achieve the desired requirement.</p>

<p>Change Area :&ndash; Software Design and Implementation. Requirements is not allowed to change by team.</p>

<p>Example :&ndash; Software company is provided with use case documents or requirement documents and asked to implement the software according to specifications given in requirement documents.</p>

<p><b><i>Why</i></b></p>

<p>Advanced Level is when someone understands the business goals of the application and is allowed to choose requirements, design and implementation to achieve the business goal. As Project Managers, Product Owners, Analysts and Developers start working on designing/implementing features and requirements, they understand the business goals and why something is being build.</p>

<p>Change Area :&ndash; Software Requirements, Design and Implementation. Business goal can not be changed by team.</p>

<p>Example :&ndash; Project team is formed with co-sourced members of business and software company and Teams goes through Inception process. During Inception process, the team gains first hand understanding of business goals and how they relate to features/requirements.</p>
]]></content>
  </entry>
  
</feed>
